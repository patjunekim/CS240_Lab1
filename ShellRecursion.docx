/**
A shell sort algorithm that uses recursion to
sort an array from low to high numbers.
@author Pj Kim
**/
import java.util.Random;
public class ShellRecursion
{
public static void main(String[] args)
{
int[] array = new int[10];
Random randomObj = new Random();
//fills each index of the array with random numbers.
for (int i = 0; i < array.length; i++)
{
array[i] = randomObj.nextInt(1000);
System.out.print(array[i] + " ");
}
System.out.println();
int hibbard = 3;
shellSort(array, hibbard, 0); //Unscramble values using shell
sort to make insertion sort faster.
insertionSort(array, 1); //Use insertion sort to finish
sorting the array.
//This loop prints out the sorted array.
for (int m = 0; m < array.length; m++)
{
System.out.print(array[m] + " ");
}
}
/**
First recursive method for shell sort, determining the
numofcomparisons and calling itself until p equals hibbard.
*/
public static void shellSort(int[] array, int hibbard, int p)
{
if (p != hibbard)
{
int numofcomparisons = (array.length/hibbard) + 1;
if ((((numofcomparisons-1)*hibbard) + p) >
array.length-1)
{
numofcomparisons--;
}
firstLoop(array, numofcomparisons, p, 1, hibbard);
p++;
shellSort(array, hibbard, p);
}
}
/**
Second recursive method for shell sort, looping itself and
calling secondLoop() until r equals numofcomparisons.
*/
public static void firstLoop(int[] array, int numofcomparisons, int p,
int r, int hibbard)
{
if (r != numofcomparisons)
{
int w = r;
secondLoop(array, p, w, hibbard);
r++;
firstLoop(array, numofcomparisons, p, r, hibbard);
}
}
/**
Third and final recursive method for shell sort, looping
itself
until w equals 0. At this point, the indexs have been sorted
within
the gap of hibbard.
*/
public static void secondLoop(int[] array, int p, int w, int hibbard)
{
if (w != 0)
{
if (array[(w*hibbard)+p] < array[((w-1)*hibbard)+p])
//If the index is less than the index behind it, swap them.
{
int temp = array[((w-1)*hibbard)+p];
array[((w-1)*hibbard)+p] =
array[(w*hibbard)+p];
array[(w*hibbard)+p] = temp;
w--;
secondLoop(array, p, w, hibbard);
}
}
}
//Insertion sorts the array.
public static void insertionSort(int[] array, int w)
{
if (w == array.length - 1) //Base case. If scanning at the end
of the array, sort and don't call insertionSort() again.
{
checks(array, w);
}
else //Recursive case, if not done sorting the array.
{
checks(array, w);
w++;
insertionSort(array, w);
}
}
/*
This method sorts the array by swapping the current index with
the previous if it is smaller.
insertionSort() calls this method to perform checks and swaps
on the array.
*/
public static int[] checks(int[] array, int r)
{
if (r == 0) //Base case, if finished scanning the array.
{
return array;
}
if (array[r] < array[r-1]) //If the previous index is larger,
swap with it.
{
int temp = array[r-1];
array[r-1] = array[r];
array[r] = temp;
r--;
checks(array, r);
}
return array;
}
}